resistance = "RESISTANCE") %>%
# count genes vs strains
count(file, gene) %>%
# Convert to wide table with genes as column headers and n as values
pivot_wider(names_from = gene,
values_from = n)
# Shorten strain names (remove the unnecessary string)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
{
return(wide)
}
}
# Run function
wide = mk_count_table(ab_tab_unique)
wide$file
wide$file <- gsub("_hybractersta", "", wide$file)
wide$file <- gsub("_flyesta", "", wide$file)
wide$file <- gsub("_unicyclersta", "", wide$file)
wide$file
# Check
head(wide)
# Converts to dataframe
count_to_dataframe = function(wide)
{
wide = wide
# make the genenames a variable
rows = wide$file
# Remove the file column
wide3 = wide %>% select(-file)
# name the rows as strains
rownames(wide3) = rows
# convert to dataframe
d = as.data.frame(wide3)
# convert na to 0
d[is.na(d)] = 0
#name rows
rownames(d) = rows
# convert to matrix
df = d
{
return(df)
}
}
df = count_to_dataframe(wide)
# Converts to matrix
count_to_mat = function(wide)
{
wide = wide
# make the genenames a variable
rows = wide$file
# Remove the file column
wide3 = wide %>% select(-file)
# name the rows as strains
rownames(wide3) = rows
# convert to dataframe
d = as.data.frame(wide3)
# convert na to 0
d[is.na(d)] <- 0
# name rows
rownames(d) = rows
# convert to matrix
mat = as.matrix(d)
{
return(mat)
}
}
# Run Function
mat = count_to_mat(wide)
# Check output
head(mat)
nrow(mat)
class(mat)
mat
colnames(mat)
View(df)
# Generate  basic heatmap
pheatmap(df)
# convert to binary
df = count_to_dataframe(wide)
df <- ifelse(df > 0, 1, 0)
print(df)
# Generate  basic heatmap
pheatmap(df)
# Generate the heatmap with annotations
isolates = read_csv("data/Isolate_species.csv")
isolates_df = as.data.frame(isolates)
isolates_df = isolates_df[-1,]
species_colors <- c("K. pneumoniae" = "#DDAD3B",
"E. coli" = "#9F7831",
"K. quasipneumoniae similipneumoniae" = "#666666")
# Annotation for isolates (y-axis)
annotation_row <- data.frame(Species = isolates_df$Species)
rownames(annotation_row) <- isolates_df$Isolate
vfdb_class = read_csv("data/VFDB_classes.csv")
# Generate the heatmap with annotations
isolates = read_csv("data/Isolate_species.csv")
isolates_df = as.data.frame(isolates)
isolates_df = isolates_df[-1,]
species_colors <- c("K. pneumoniae" = "#DDAD3B",
"E. coli" = "#9F7831",
"K. quasipneumoniae similipneumoniae" = "#666666")
# Annotation for isolates (y-axis)
annotation_row <- data.frame(Species = isolates_df$Species)
rownames(annotation_row) <- isolates_df$Isolate
vfdb_class = read_csv("data/VFDB_classes.csv")
vfdb_class
vfdb_class_df = as.data.frame(vfdb_class)
vfdb_class_df
class_colors <- c("Protectins" = "#4B9B7A",
"Toxins" = "#CA6728",
"Iron-uptake" = "#D43F88",
"Adhesins" = "#7470AF")
# Annotation for isolates (x-axis)
annotation_col <- data.frame(class = vfdb_class_df$class)
rownames(annotation_col) <- vfdb_class_df$GENE
# Create a list of annotation colors
annotation_colors <- list(class = class_colors, Species = species_colors)
custom_colors <- colorRampPalette(c("#FFFFFF","#FBF5BB", "#FADF9F", "#F8B877", "#D37A5A", "#A84451"))(6)
pheatmap(df,
annotation_col = annotation_col,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = custom_colors,
show_rownames = TRUE,
show_colnames = TRUE,
border_color = "black")
# Generate the heatmap with annotations
isolates = read_csv("data/Isolate_species.csv")
isolates_df = as.data.frame(isolates)
isolates_df = isolates_df[-1,]
species_colors <- c("K. pneumoniae" = "#DDAD3B",
"E. coli" = "#9F7831",
"K. quasipneumoniae similipneumoniae" = "#666666")
# Annotation for isolates (y-axis)
annotation_row <- data.frame(Species = isolates_df$Species)
rownames(annotation_row) <- isolates_df$Isolate
vfdb_class = read_csv("data/VFDB_classes.csv")
vfdb_class_df = as.data.frame(vfdb_class)
class_colors <- c("Protectins" = "#4B9B7A",
"Toxins" = "#CA6728",
"Iron-uptake" = "#D43F88",
"Adhesins" = "#7470AF")
# Annotation for isolates (x-axis)
annotation_col <- data.frame(class = vfdb_class_df$class)
rownames(annotation_col) <- vfdb_class_df$GENE
# Create a list of annotation colors
annotation_colors <- list(class = class_colors, Species = species_colors)
custom_colors <- colorRampPalette(c("#FFFFFF","#FBF5BB", "#FADF9F", "#F8B877", "#D37A5A", "#A84451"))(6)
pheatmap(df,
annotation_col = annotation_col,
annotation_row = annotation_row,
annotation_colors = annotation_colors,
color = custom_colors,
show_rownames = TRUE,
show_colnames = TRUE,
border_color = "black")
# Load necessary libraries
library(readxl)
library(readr)
library(pheatmap)
library(dplyr)
library(tidyr)
library(tibble)
library(RColorBrewer)
# 772 Malawi Kleb Strains
abricate_output = readr::read_csv("data/all_abricate_773_Ec_Kp_CHL_VFDB_fasta_L60_T90.csv")
ab_tab = abricate_output
#DASSIM <- DASSIM %>% select(matches("^ybt|^irp|^fyu"))
iron_VF <- ab_tab %>% filter(grepl("ybt|fyu|irp", GENE))
# Remove duplicates
ab_tab_unique = rm_duplicates(ab_tab)
# Make count table
wide = mk_count_table(ab_tab_unique)
# Rename necessary
wide$file = gsub("all_spades_assemblies/", "", wide$file)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub(".fasta", "", wide$file)
wide$file = gsub("_assembledsta", "", wide$file)
wide$file = gsub("_1_SPAdes_assemblysta", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
wide$file = gsub("_contigssta", "", wide$file)
wide$file = gsub("sta", "", wide$file)
View(wide)
# Remove duplicates
ab_tab_unique = rm_duplicates(ab_tab)
# Make count table
wide = mk_count_table(ab_tab_unique)
# Rename necessary
wide$file = gsub("all_spades_assemblies/", "", wide$file)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub(".fasta", "", wide$file)
wide$file = gsub("_assembledsta", "", wide$file)
wide$file = gsub("_1_SPAdes_assemblysta", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
wide$file = gsub("_contigssta", "", wide$file)
wide$file = gsub("sta", "", wide$file)
# Load necessary libraries
library(readxl)
library(readr)
library(pheatmap)
library(dplyr)
library(tidyr)
library(tibble)
library(RColorBrewer)
# 772 Malawi Kleb Strains
abricate_output = readr::read_csv("data/all_abricate_773_Ec_Kp_CHL_VFDB_fasta_L60_T90.csv")
ab_tab = abricate_output
#DASSIM <- DASSIM %>% select(matches("^ybt|^irp|^fyu"))
iron_VF <- ab_tab %>% filter(grepl("ybt|fyu|irp", GENE))
# Remove duplicates
ab_tab_unique = rm_duplicates(ab_tab)
# Make count table
wide = mk_count_table(ab_tab_unique)
# Rename necessary
wide$file = gsub("all_spades_assemblies/", "", wide$file)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub(".fasta", "", wide$file)
wide$file = gsub("_assembledsta", "", wide$file)
wide$file = gsub("_1_SPAdes_assemblysta", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
wide$file = gsub("_contigssta", "", wide$file)
wide$file = gsub("sta", "", wide$file)
# Convert count table to dataframe
df = count_to_dataframe(wide)
# Convert count table to matrix
mat = count_to_mat(wide)
# Load necessary libraries
library(readxl)
library(readr)
library(pheatmap)
library(dplyr)
library(tidyr)
library(tibble)
library(RColorBrewer)
# 772 Malawi Kleb Strains
abricate_output = readr::read_csv("data/all_abricate_773_Ec_Kp_CHL_VFDB_fasta_L60_T90.csv")
ab_tab = abricate_output
#DASSIM <- DASSIM %>% select(matches("^ybt|^irp|^fyu"))
iron_VF <- ab_tab %>% filter(grepl("ybt|fyu|irp", GENE))
# Remove duplicates
ab_tab_unique = rm_duplicates(ab_tab)
# Make count table
wide = mk_count_table(ab_tab_unique)
# Rename necessary
wide$file = gsub("all_spades_assemblies/", "", wide$file)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub(".fasta", "", wide$file)
wide$file = gsub("_assembledsta", "", wide$file)
wide$file = gsub("_1_SPAdes_assemblysta", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
wide$file = gsub("_contigssta", "", wide$file)
wide$file = gsub("sta", "", wide$file)
# Convert count table to dataframe
df = count_to_dataframe(wide)
# Convert count table to matrix
mat = count_to_mat(wide)
# Filter the dataframe for the column "ybt"
#filtered_df <- d[, grepl("ybt", colnames(d)), drop = FALSE]
#filtered_df$seq = rownames(filtered_df)
# Filter the dataframe for columns containing "ybt", "fyu", or "irp"
filtered_df <- d[, grepl("ybt|fyu|irp", colnames(d)), drop = FALSE]
# Remove duplicates
ab_tab_unique = rm_duplicates(ab_tab)
# Make count table
wide = mk_count_table(ab_tab_unique)
# Rename necessary
wide$file = gsub("all_spades_assemblies/", "", wide$file)
wide$file = gsub(".fa", "", wide$file)
wide$file = gsub(".fasta", "", wide$file)
wide$file = gsub("_assembledsta", "", wide$file)
wide$file = gsub("_1_SPAdes_assemblysta", "", wide$file)
wide$file = gsub("_assembled.fasta", "", wide$file)
wide$file = gsub("_contigssta", "", wide$file)
wide$file = gsub("sta", "", wide$file)
# Convert count table to dataframe
d = count_to_dataframe(wide)
# Convert count table to matrix
mat = count_to_mat(wide)
# Filter the dataframe for the column "ybt"
#filtered_df <- d[, grepl("ybt", colnames(d)), drop = FALSE]
#filtered_df$seq = rownames(filtered_df)
# Filter the dataframe for columns containing "ybt", "fyu", or "irp"
filtered_df <- d[, grepl("ybt|fyu|irp", colnames(d)), drop = FALSE]
# Add row names as a new column
filtered_df$seq <- rownames(filtered_df)
# View the filtered dataframe
print(filtered_df)
# Sum values by category
library(dplyr)
metadata = read_csv("data/all_773_DASSIM_BSI_metadata.csv")
BSI_metadata_Ec = read_csv("data/BSI_metadata_Ec.csv")
BSI_metadata_KpSc = read_csv("data/BSI_metadata_KpSc_2.csv")
library(dplyr)
library(stringr)
filtered_df <- d[, grepl("ybt|fyu|irp", colnames(d)), drop = FALSE]
filtered_df$seq <- rownames(filtered_df)
filtered_df <- filtered_df %>%
mutate(seq = gsub("-", "_", seq))
rownames(filtered_df) = gsub("-", "_", rownames(filtered_df))
# DASSIM	ERR3865256	28099_1_10	ERR3865256
# Create a named vector for replacement
replacement_map <- setNames(metadata$ENA_accession, metadata$lane)
# Perform the replacement
filtered_df <- filtered_df %>%
mutate(accession = str_replace_all(seq, replacement_map) # Replace lanes with ENA accessions
)
comparison_df = data.frame(accession = metadata$ENA_accession,
lane = metadata$lane)
# Add the accession column with conditional logic
filtered_df[,"accession"] <- ifelse(
grepl("^E", filtered_df[,"seq"]), # Check if seq starts with "E"
filtered_df[,"seq"], # If true, copy seq to accession
comparison_df$accession[match(unlist(filtered_df[,"seq"]), comparison_df$lane)] # Otherwise, match and replace
)
# View the results
print(filtered_df["28099_1_10",]) # Should be ERR3865256
# Reshape and summarize data for wide
metadata$accession = metadata$ENA_accession
metadata_Ec_update = metadata %>%
left_join(BSI_metadata_Ec, by = c('Strain_ID'))
metadata_KpSc_update = metadata_Ec_update %>%
left_join(BSI_metadata_KpSc, by = c('Strain_ID'))
meta_join = filtered_df %>%
left_join(metadata_KpSc_update, by = c('accession'))
# For KpSC
unique(meta_join$Species)
meta_join_KpSc = meta_join %>% filter(Species == "KpSC")
unique(meta_join$study )
DASSIM = meta_join_KpSc %>% filter(study == "DASSIM")
BSI = meta_join_KpSc %>% filter(study == "bacteraemia")
BSI = BSI %>% filter(Source.y == "Blood")
BSI$Source.y
#DASSIM = DASSIM %>% select(starts_with("ybt"))
#BSI= BSI %>% select(starts_with("ybt"))
DASSIM <- DASSIM %>% select(matches("^ybt|^irp|^fyu"))
BSI <- BSI %>% select(matches("^ybt|^irp|^fyu"))
summarized_DASSIM  <- DASSIM  %>% summarize(across(where(is.numeric), mean) * 100)
summarized_BSI <- BSI %>% summarize(across(where(is.numeric), mean) * 100)
summarized_DASSIM$study = "DASSIM"
summarized_BSI$study = "BSI"
# Reshape and summarize data
summarized_pc = rbind(summarized_DASSIM, summarized_BSI)
# Bar plot
library(ggplot2)
ggplot(summarized_pc, aes(x = study, y = ybtA, fill = study)) +
geom_bar(stat = "identity") +
labs(x = "Category", y = "Total Value", title = "Bar Plot by Protein Category") +
theme_minimal()
DASSIM_meta = read_csv("../VFDB_comparison_large/DASSIM_metadata.csv")
DASSIM_meta = read_csv("data/DASSIM_metadata.csv")
library(dplyr)
library(stringr)
meta_join_DASSIM = meta_join %>%
left_join(DASSIM_meta, by = c('accession'))
# For KpSC
unique(meta_join_DASSIM$Species)
meta_join_KpSc_DASSIM = meta_join_DASSIM %>% filter(Species == "KpSC")
unique(meta_join$study)
DASSIM = meta_join_KpSc_DASSIM %>% filter(study == "DASSIM")
DASSIM_sepsis = DASSIM %>% filter(condition == "sepsis")
DASSIM_inpatient = DASSIM %>% filter(condition == "inpatient")
DASSIM_community = DASSIM %>% filter(condition == "community")
BSI = meta_join_KpSc_DASSIM %>% filter(study == "bacteraemia")
BSI = BSI %>% filter(Source.y == "Blood")
#DASSIM_sepsis = DASSIM_sepsis %>% select(starts_with("ybt"))
#DASSIM_inpatient = DASSIM_inpatient %>% select(starts_with("ybt"))
#DASSIM_community = DASSIM_community %>% select(starts_with("ybt"))
#BSI = BSI %>% select(starts_with("ybt"))
# Select columns that start with "ybt", "adr", or "ppy"
DASSIM_sepsis = DASSIM_sepsis %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_inpatient = DASSIM_inpatient %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_community = DASSIM_community %>% select(matches("^ybt|^irp|^fyu"))
BSI = BSI %>% select(matches("^ybt|^irp|^fyu"))
nrow(DASSIM_sepsis) # 138
nrow(DASSIM_inpatient) # 33
nrow(DASSIM_community) # 16
nrow(BSI) # 57
# summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), mean) * 100)
summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_inpatient = DASSIM_inpatient %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_community = DASSIM_community %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_BSI <- BSI %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_sepsis$study = "DASSIM_sepsis"
summarized_DASSIM_inpatient$study = "DASSIM_inpatient"
summarized_DASSIM_community$study = "DASSIM_community"
summarized_BSI$study = "BSI"
# Reshape and summarize data
summarized_pc = rbind(summarized_DASSIM_sepsis, summarized_DASSIM_inpatient, summarized_DASSIM_community, summarized_BSI)
# Bar plot
library(ggplot2)
ggplot(summarized_pc, aes(x = study, y = ybtA, fill = study)) +
geom_bar(stat = "identity") +
labs(x = "Category", y = "Total Value", title = "Bar Plot by Protein Category") +
theme_minimal()
# Convert to long  ##
summarized_long_pc = summarized_pc %>% pivot_longer(!study, names_to = "gene", values_to = "count")
summarized_pc_for_paper_KpSc = summarized_long_pc %>% group_by(study) %>% summarize(meant_count = mean(count))
summarized_long_pc$order <- factor(summarized_long_pc$study, levels = sort(unique(summarized_long_pc$study)))
level_order <- c('BSI', 'DASSIM_inpatient', 'DASSIM_sepsis', "DASSIM_community")
KPSC_plot = ggplot(summarized_long_pc, aes(x = factor(study, level = level_order), y = count, fill = study)) +
geom_bar(stat = "identity") +
ylim(0, 100) +
labs(x = "Study", y = "%", title = "K. pneumoniae") +
theme_minimal() + facet_wrap(~ gene)
KPSC_plot
# For Ecoli
unique(meta_join_DASSIM$Species)
meta_join_Ecoli_DASSIM = meta_join_DASSIM %>% filter(Species == "E. coli")
unique(meta_join$study)
DASSIM = meta_join_Ecoli_DASSIM %>% filter(study == "DASSIM")
DASSIM_sepsis = DASSIM %>% filter(condition == "sepsis")
DASSIM_inpatient = DASSIM %>% filter(condition == "inpatient")
DASSIM_community = DASSIM %>% filter(condition == "community")
BSI = meta_join_Ecoli_DASSIM %>% filter(study == "bacteraemia")
BSI = BSI %>% filter(Source.x == "Blood")
#DASSIM_sepsis = DASSIM_sepsis %>% select(starts_with("ybt"))
#DASSIM_inpatient = DASSIM_inpatient %>% select(starts_with("ybt"))
#DASSIM_community = DASSIM_community %>% select(starts_with("ybt"))
#BSI = BSI %>% select(starts_with("ybt"))
DASSIM_sepsis = DASSIM_sepsis %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_inpatient = DASSIM_inpatient %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_community = DASSIM_community %>% select(matches("^ybt|^irp|^fyu"))
BSI = BSI %>% select(matches("^ybt|^irp|^fyu"))
nrow(DASSIM_sepsis) # 334
nrow(DASSIM_inpatient) # 84
nrow(DASSIM_community) # 31
nrow(BSI) # 23
# summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), mean) * 100)
summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_inpatient = DASSIM_inpatient %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_community = DASSIM_community %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_BSI <- BSI %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_sepsis$study = "DASSIM_sepsis"
summarized_DASSIM_inpatient$study = "DASSIM_inpatient"
summarized_DASSIM_community$study = "DASSIM_community"
summarized_BSI$study = "BSI"
# Reshape and summarize data
summarized_pc = rbind(summarized_DASSIM_sepsis, summarized_DASSIM_inpatient, summarized_DASSIM_community, summarized_BSI)
# Bar plot
library(ggplot2)
ggplot(summarized_pc, aes(x = study, y = ybtA, fill = study)) +
geom_bar(stat = "identity") +
labs(x = "Category", y = "Total Value", title = "Bar Plot by Protein Category") +
theme_minimal()
# Convert to long  ##
summarized_long_pc = summarized_pc %>% pivot_longer(!study, names_to = "gene", values_to = "count")
summarized_pc_for_paper_Ec = summarized_long_pc %>% group_by(study) %>% summarize(meant_count = mean(count))
summarized_long_pc$order <- factor(summarized_long_pc$study, levels = sort(unique(summarized_long_pc$study)))
level_order <- c("DASSIM_community", 'DASSIM_inpatient', 'DASSIM_sepsis', 'BSI')
Ecoli_plot = ggplot(summarized_long_pc, aes(x = factor(study, level = level_order), y = count, fill = study)) +
geom_bar(stat = "identity") +
ylim(0, 100) +
labs(x = "Study", y = "%", title = "E. coli") +
theme_minimal() + facet_wrap(~ gene)
Ecoli_plot
DASSIM_meta = read_csv("data/DASSIM_metadata.csv")
library(dplyr)
library(stringr)
meta_join_DASSIM = meta_join %>%
left_join(DASSIM_meta, by = c('accession'))
# For KpSC
unique(meta_join_DASSIM$Species)
meta_join_KpSc_DASSIM = meta_join_DASSIM %>% filter(Species == "KpSC")
unique(meta_join$study)
DASSIM = meta_join_KpSc_DASSIM %>% filter(study == "DASSIM")
DASSIM_sepsis = DASSIM %>% filter(condition == "sepsis")
DASSIM_inpatient = DASSIM %>% filter(condition == "inpatient")
DASSIM_community = DASSIM %>% filter(condition == "community")
BSI = meta_join_KpSc_DASSIM %>% filter(study == "bacteraemia")
BSI = BSI %>% filter(Source.y == "Blood")
#DASSIM_sepsis = DASSIM_sepsis %>% select(starts_with("ybt"))
#DASSIM_inpatient = DASSIM_inpatient %>% select(starts_with("ybt"))
#DASSIM_community = DASSIM_community %>% select(starts_with("ybt"))
#BSI = BSI %>% select(starts_with("ybt"))
# Select columns that start with "ybt", "adr", or "ppy"
DASSIM_sepsis = DASSIM_sepsis %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_inpatient = DASSIM_inpatient %>% select(matches("^ybt|^irp|^fyu"))
DASSIM_community = DASSIM_community %>% select(matches("^ybt|^irp|^fyu"))
BSI = BSI %>% select(matches("^ybt|^irp|^fyu"))
nrow(DASSIM_sepsis) # 138
nrow(DASSIM_inpatient) # 33
nrow(DASSIM_community) # 16
nrow(BSI) # 57
# summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), mean) * 100)
summarized_DASSIM_sepsis = DASSIM_sepsis %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_inpatient = DASSIM_inpatient %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_community = DASSIM_community %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_BSI <- BSI %>% summarize(across(where(is.numeric), ~ sum(. == 1) / n() * 100))
summarized_DASSIM_sepsis$study = "DASSIM_sepsis"
summarized_DASSIM_inpatient$study = "DASSIM_inpatient"
summarized_DASSIM_community$study = "DASSIM_community"
summarized_BSI$study = "BSI"
# Reshape and summarize data
summarized_pc = rbind(summarized_DASSIM_sepsis, summarized_DASSIM_inpatient, summarized_DASSIM_community, summarized_BSI)
# Bar plot
library(ggplot2)
ggplot(summarized_pc, aes(x = study, y = ybtA, fill = study)) +
geom_bar(stat = "identity") +
labs(x = "Category", y = "Total Value", title = "Bar Plot by Protein Category") +
theme_minimal()
# Convert to long  ##
summarized_long_pc = summarized_pc %>% pivot_longer(!study, names_to = "gene", values_to = "count")
summarized_pc_for_paper_KpSc = summarized_long_pc %>% group_by(study) %>% summarize(meant_count = mean(count))
summarized_long_pc$order <- factor(summarized_long_pc$study, levels = sort(unique(summarized_long_pc$study)))
level_order <- c('BSI', 'DASSIM_inpatient', 'DASSIM_sepsis', "DASSIM_community")
KPSC_plot = ggplot(summarized_long_pc, aes(x = factor(study, level = level_order), y = count, fill = study)) +
geom_bar(stat = "identity") +
ylim(0, 100) +
labs(x = "Study", y = "%", title = "K. pneumoniae") +
theme_minimal() + facet_wrap(~ gene)
KPSC_plot
