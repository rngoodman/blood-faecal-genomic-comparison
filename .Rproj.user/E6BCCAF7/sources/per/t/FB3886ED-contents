




######## VFDB ####

# Loading packages

library(readr)
library(dplyr)
library(tidyr)
library(pheatmap)
library(RColorBrewer)
library(igraph)
library(readr)
library(cooccur)
library(reshape2)
library(pheatmap)
library(RColorBrewer)

# Reading in data
abricate_output = read_csv("data/all_hybracter_1448LR_2240U_1654U_vfdb_fasta_L60_T90.csv")

abricate_output = read_csv("data/all_hybracter_1448LR_2240U_1654U_vfdb_fasta_L60_T90_plus_hha.csv")

abricate_output = read_csv("data/all_hybracter_1448LR_2240U_1654U_vfdb_fasta_L60_T90_plus_BSI_indicators.csv")

abricate_output = read_csv("../../data/all_hybracter_1448LR_2240U_1654U_vfdb__BSI_indicators_8_Aug_2024_fasta_L60_T90.csv")

vfdb_class = read_csv("data/VFDB_classes.csv")

ab_tab = abricate_output

# Make sense of dataset 

head(ab_tab)

class(ab_tab)

#Wrangling the abricate table


#Pre-processing the dataset

rm_duplicates = function(ab_tab)
{
  
  # First Remove duplicates
  # These cause issues with creating a lit rather than a dataframe
  # When compared against the database there can sometimes be duplciates 
  
  # arrange and group by ab_tab 
  ab_tab_unique <- ab_tab %>% 
    arrange(GENE, -`%COVERAGE`) %>% 
    group_by(GENE)
  
  # Check the colnames
  colnames(ab_tab_unique)
  
  # Check the duplicates 
  duplicated(ab_tab_unique[c("#FILE","GENE")])
  print("Duplicates found:")
  print(c(which(duplicated(ab_tab_unique[c("#FILE","GENE")]) == TRUE))) # see which contain duplicates
  
  # Remove columns that contain duplicates in FILE, GENE and COVERAGE 
  ab_tab_unique <- ab_tab[!duplicated(ab_tab_unique[c("#FILE","GENE")]),] #using colnames
  #ab_tab_unique <- ab_tab_unique[!duplicated(ab_tab_unique[c(1,2)]),] #using col numbers
  
  
  # Check whether duplicates have been delted 
  print("Duplicates remaining:")
  print(which(duplicated(ab_tab_unique[c("#FILE","GENE")]) == TRUE)) # see which contain duplicates
  
  {
    return(ab_tab_unique)
  }
}


# Run function 
ab_tab_unique = rm_duplicates(ab_tab)


mk_count_table = function(ab_tab)
{
  # Funtion to make the Abricate table wide 
  # Create a new value from original ab_tab to wide count table 
  wide = ab_tab %>% 
    # select strain, gene and resistance and rename
    select("#FILE", GENE, RESISTANCE) %>% 
    # rename 
    rename(gene = "GENE",
           file = "#FILE",
           resistance = "RESISTANCE") %>% 
    # count genes vs strains
    count(file, gene) %>% 
    # Convert to wide table with genes as column headers and n as values 
    pivot_wider(names_from = gene,
                values_from = n)
  
  # Shorten strain names (remove the unnecessary string)
  wide$file = gsub(".fa", "", wide$file)
  wide$file = gsub("_assembled.fasta", "", wide$file)

  
  {
    return(wide)
  }
}

# Run function 
wide = mk_count_table(ab_tab_unique)

wide$file

wide$file <- gsub("_hybractersta", "", wide$file)
wide$file <- gsub("_flyesta", "", wide$file)
wide$file <- gsub("_unicyclersta", "", wide$file)

wide$file

# Check
head(wide)

# Converts to dataframe
count_to_dataframe = function(wide)
{
  wide = wide
  
  # make the genenames a variable 
  rows = wide$file
  
  # Remove the file column
  wide3 = wide %>% select(-file)
  
  # name the rows as strains
  rownames(wide3) = rows
  
  # convert to dataframe
  d = as.data.frame(wide3)
  
  # convert na to 0
  d[is.na(d)] = 0
  
  #name rows
  rownames(d) = rows
  
  # convert to matrix
  df = d
  
  
  {
    return(df)
  }
}

df = count_to_dataframe(wide)

# Converts to matrix
count_to_mat = function(wide)
{
  wide = wide
  
  # make the genenames a variable 
  rows = wide$file
  
  # Remove the file column
  wide3 = wide %>% select(-file)
  
  # name the rows as strains
  rownames(wide3) = rows
  
  # convert to dataframe
  d = as.data.frame(wide3)
  
  # convert na to 0
  d[is.na(d)] <- 0
  
  # name rows
  rownames(d) = rows
  
  # convert to matrix
  mat = as.matrix(d)
  
  
  {
    return(mat)
  }
}

# Run Function 
mat = count_to_mat(wide)


# Check output
head(mat)
nrow(mat)
class(mat)
mat
colnames(mat)


# Generate  basic heatmap
pheatmap(mat)
pheatmap(df)

# convert to binary 
df = count_to_dataframe(wide)
df <- ifelse(df > 0, 1, 0)

print(df)

isolates = read_csv("data/Isolate_species.csv")

isolates_df = as.data.frame(isolates)

isolates_df = isolates_df[-1,]

species_colors <- c("K. pneumoniae" = "#DDAD3B", 
                    "E. coli" = "#9F7831",
                    "K. quasipneumoniae similipneumoniae" = "#666666")

# Annotation for isolates (y-axis)
annotation_row <- data.frame(Species = isolates_df$Species)
rownames(annotation_row) <- isolates_df$Isolate





# Generate the heatmap with annotations

vfdb_class = read_csv("data/VFDB_classes.csv")

vfdb_class

vfdb_class_df = as.data.frame(vfdb_class)

vfdb_class_df

class_colors <- c("Protectins" = "#4B9B7A", 
                  "Toxins" = "#CA6728", 
                  "Iron-uptake" = "#D43F88", 
                  "Adhesins" = "#7470AF")


# Annotation for isolates (x-axis)

annotation_col <- data.frame(class = vfdb_class_df$class)
rownames(annotation_col) <- vfdb_class_df$GENE

# Create a list of annotation colors
annotation_colors <- list(class = class_colors, Species = species_colors)


custom_colors <- colorRampPalette(c("#FFFFFF","#FBF5BB", "#FADF9F", "#F8B877", "#D37A5A", "#A84451"))(6)


pheatmap(df, 
         annotation_col = annotation_col, 
         annotation_row = annotation_row, 
         annotation_colors = annotation_colors, 
         color = custom_colors,
         show_rownames = TRUE, 
         show_colnames = TRUE,
         border_color = "black")














